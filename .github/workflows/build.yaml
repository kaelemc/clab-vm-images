name: Build image

on:
  push:
    branches: ["**"]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      TAG: ${{ github.head_ref || github.ref_name }}
      TYPES: |
        qcow2
        vmdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push bootc container image
        run: |
          docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}" .
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}"

      - name: Build VM images from bootc image
        id: bib
        uses: osbuild/bootc-image-builder-action@v0.0.2
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}"
          config-file: ./bootc/config.toml
          types: ${{ env.TYPES }}

      - name: Sparsify VM images
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-utils
          sudo mkdir -p ${{ steps.bib.outputs.output-directory }}/vmdk-sparse
          sudo mkdir -p ${{ steps.bib.outputs.output-directory }}/qcow2-sparse
          
          qcow2_file=${{ steps.bib.outputs.output-directory }}/qcow2/*.qcow2
          basename=$(basename "$qcow2_file" .qcow2)
          sparse_qcow2="${{ steps.bib.outputs.output-directory }}/qcow2-sparse/${basename}.qcow2"
          sudo qemu-img convert -p -f qcow2 -O qcow2 -c "$qcow2_file" "$sparse_qcow2"
          echo "Original QCOW2 size: $(ls -lh "$qcow2_file" | awk '{print $5}')"
          echo "Sparse QCOW2 size: $(ls -lh "$sparse_qcow2" | awk '{print $5}')"
          
          vmdk_file=${{ steps.bib.outputs.output-directory }}/vmdk/*.vmdk
          basename=$(basename "$vmdk_file" .vmdk)
          sparse_vmdk="${{ steps.bib.outputs.output-directory }}/vmdk-sparse/${basename}.vmdk"
          sudo qemu-img convert -p -f vmdk -O vmdk -o subformat=streamOptimized "$vmdk_file" "$sparse_vmdk"
          echo "Original VMDK size: $(ls -lh "$vmdk_file" | awk '{print $5}')"
          echo "Sparse VMDK size: $(ls -lh "$sparse_vmdk" | awk '{print $5}')"

      - name: Generate OVA file
        run: |
          sudo apt-get install -y python3
          sudo mkdir -p ${{ steps.bib.outputs.output-directory }}/ova
          
          vmdk_file=${{ steps.bib.outputs.output-directory }}/vmdk-sparse/*.vmdk
          basename=$(basename "$vmdk_file" .vmdk)
          sudo python3 ovfbuilder.py \
            --disk "$vmdk_file" \
            --template ovf_template.xml \
            --out "${{ steps.bib.outputs.output-directory }}/ova/${basename}.ova"

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bootc-${{ env.TAG }}
          path: ${{ steps.bib.outputs.output-directory }}
          if-no-files-found: error

      - name: Add release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            ${{ steps.bib.outputs.output-directory }}/qcow2-sparse/*.qcow2
            ${{ steps.bib.outputs.output-directory }}/vmdk-sparse/*.vmdk
            ${{ steps.bib.outputs.output-directory }}/ova/*.ova
